module;
#include <ccl/defines.hpp>
module ccl.lexer.dot_item:sequence_impl;

import isl;
import ccl.text;
import :sequence;

namespace ccl::lexer::dot_item
{
    Sequence::Sequence(
        SequenceFlags sequence_flags, isl::string_view sequence_begin_and_end,
        TextIterator &rule_iterator, Id item_id)
      : Sequence{
            sequence_flags, sequence_begin_and_end, sequence_begin_and_end, rule_iterator, item_id}
    {}

    Sequence::Sequence(
        SequenceFlags sequence_flags, isl::string_view sequence_starter,
        isl::string_view sequence_ender, TextIterator &rule_iterator, Id item_id)
      : DotItemConcept{item_id, Flags{
                               .sequenceIsMultiline=sequence_flags.multiline,
                               .noEscapingSymbols=sequence_flags.noEscaping
                           }}
      , starter{sequence_starter}
      , ender{sequence_ender}
    {
        static constexpr isl::StaticFlatmap<char32_t, char32_t, 2> special_symbols_for_sequence{
            {U'[', U'['}, {U']', U']'}};

        auto begin_iterator_state = rule_iterator;

        checkSequenceArguments(rule_iterator);
        skipStringDefinition(rule_iterator);

        while (true) {
            auto chr = U'\0';
            auto is_escaping = false;

            if (getFlags().noEscapingSymbols) {
                chr = rule_iterator.advance();
            } else {
                auto [escaping, character] = rule_iterator.nextCharWithEscapingSymbols(std::span{
                    special_symbols_for_sequence.begin(), special_symbols_for_sequence.end()});
                is_escaping = escaping;
                chr = character;
            }

            checkForUnexpectedEnd(begin_iterator_state, is_escaping, chr);

            if (isStringEnd(rule_iterator, is_escaping)) {
                rule_iterator.skip(ender.size() - 1);
                break;
            }

            isl::utf8::appendUtf32ToUtf8Container(sequenceValue, chr);
        }
    }

    auto
        Sequence::scanIteration(const ForkedGenerator &text_iterator) const -> std::optional<size_t>
    {
        isl::string_view future_text = text_iterator.getRemainingText();

        if (future_text.startsWith(sequenceValue) != isReversed()) [[unlikely]] {
            return isReversed() ? isl::utf8::size(future_text[0]) : sequenceValue.size();
        }

        return std::nullopt;
    }

    CCL_INLINE auto
        Sequence::isStringEnd(const TextIterator &rule_iterator, bool is_escaping) const -> bool
    {
        if (is_escaping) {
            return false;
        }

        auto text = rule_iterator.getRemainingWithCurrent();
        return text.startsWith(isl::as<isl::string_view>(ender));
    }

    CCL_INLINE auto Sequence::checkForUnexpectedEnd(
        TextIterator &rule_iterator,
        bool is_escaping,
        char32_t chr) const -> void
    {
        if (is_escaping) {
            return;
        }

        if (text::isEoF(chr)) {
            throwUnterminatedString(rule_iterator, "unterminated sequence");
        }

        if ('\n' == chr && !getFlags().sequenceIsMultiline) [[unlikely]] {
            constexpr auto message = "new line is reached, but sequence has not been terminated";
            auto suggestion = std::format("use multiline sequence or close it with `{}`", isl::as<std::string_view>(ender));

            throwUnterminatedString(rule_iterator, message, suggestion);
        }
    }

    CCL_INLINE auto Sequence::skipStringDefinition(TextIterator &rule_iterator) const -> void
    {
        rule_iterator.skip(starter.size() - 1);
    }

    CCL_INLINE auto Sequence::checkSequenceArguments(TextIterator &rule_iterator) const -> void
    {
        auto text = rule_iterator.getRemainingWithCurrent();

        if (starter.empty()) [[unlikely]] {
            throwEmptyStringBegin(rule_iterator);
        }

        if (ender.empty()) [[unlikely]] {
            throwEmptyStringEnd(rule_iterator);
        }

        if (!text.startsWith(starter)) [[unlikely]] {
            throwStringBeginException(rule_iterator);
        }
    }

    CCL_INLINE auto Sequence::throwEmptyStringBegin(TextIterator &rule_iterator) -> void
    {
        rule_iterator.throwPanicError(
            text::AnalysisStage::LEXICAL_ANALYSIS, "sequence item begin cannot be empty");
        throw UnrecoverableError{"unrecoverable error in SequenceType"};
    }

    CCL_INLINE auto Sequence::throwEmptyStringEnd(TextIterator &rule_iterator) -> void
    {
        rule_iterator.throwPanicError(
            text::AnalysisStage::LEXICAL_ANALYSIS, "sequence item end cannot be empty");
        throw UnrecoverableError{"unrecoverable error in SequenceType"};
    }

    CCL_INLINE auto Sequence::throwUnterminatedString(
        TextIterator &rule_iterator,
        isl::string_view message,
        isl::string_view suggestion) -> void
    {
        rule_iterator.throwPanicError(text::AnalysisStage::LEXICAL_ANALYSIS, message, suggestion);
        throw UnrecoverableError{"unrecoverable error in SequenceType"};
    }

    CCL_INLINE auto Sequence::throwStringBeginException(TextIterator &rule_iterator) const -> void
    {
        auto message = std::format("string literal must begin with {}", isl::as<std::string_view>(starter));

        rule_iterator.throwPanicError(text::AnalysisStage::LEXICAL_ANALYSIS, message);
        throw UnrecoverableError{"unrecoverable error in SequenceType"};
    }
}// namespace ccl::lexer::dot_item
