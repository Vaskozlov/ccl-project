option(CCL_LIBCPP "Use libc++ when compiling with clang" OFF)
option(CCL_STRICT_COMPILATION "Enable -Werror strict compilation" OFF)
option(CCL_PRECOMPILED_HEADERS "Use precompiled headers" ON)
option(CCL_ADDRESS_SANITIZER "Use sanitizers" OFF)
option(CCL_THREAD_SANITIZER "Use thread sanitizers" OFF)
option(CCL_ENABLE_IPO "Enable IPO/LTO" OFF)
option(CCL_HARDENING "Enable hardening" OFF)
option(CCL_STATIC_LIBRARY "Create static version of library " ${MSVC})
option(CCL_UNITY_BUILD "Use unity build for targets " ON)
option(CCL_INCLUDE_BENCHMARK "Include benchmark target" OFF)

message(STATUS "CC " ${CMAKE_C_COMPILER})
message(STATUS "CXX " ${CMAKE_CXX_COMPILER})
message(STATUS "Build type: " ${CMAKE_BUILD_TYPE})
message(STATUS "Strict compilation? " ${CCL_STRICT_COMPILATION})
message(STATUS "Precompiled headers? " ${CCL_PRECOMPILED_HEADERS})
message(STATUS "Static version? " ${CCL_STATIC_LIBRARY})
message(STATUS "Enable hardening?" ${CCL_HARDENING})
message(STATUS "Address sanitizer? " ${CCL_ADDRESS_SANITIZER})
message(STATUS "Thread sanitizer? " ${CCL_THREAD_SANITIZER})
message(STATUS "Unity build? " ${CCL_UNITY_BUILD})
message(STATUS "Include benchmark? " ${CCL_INCLUDE_BENCHMARK})

set(CMAKE_CXX_STANDARD 23)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
